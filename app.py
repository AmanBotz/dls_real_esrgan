import os
import telebot
import json
import codecs
import requests 
import sys
from telebot import types
from collections import deque
from dotenv import load_dotenv
from RealESRGAN import RealESRGAN
import torch

from utils import process_requests
from log_util import logger

# –î–ª—è –≤—ã–≤–æ–¥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –æ—à–∏–±–æ–∫ UTF
sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = RealESRGAN(device, scale=4)
model.load_weights('weights/RealESRGAN_x4.pth', download=True)

# –°–±–æ—Ä—â–∏–∫ –ª–æ–≥–æ–≤
logger = logger()

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –±–æ—Ç—É –æ—Ç–≤–µ—á–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
# –Ø –≤–æ–∑–º–æ–∂–Ω–æ –µ–µ –∫—Ä–∏–≤–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç—É—Ç, 
# –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–µ —Å—Ç–µ–π—Ç –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å, –Ω–æ —Ç—É—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å–µ –±—É–¥–µ—Ç, –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–¥—É–º–∞–ª –≤—Å–µ —Å–∏—Ç—É–∞—Ü–∏–∏,
# –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–∏–ª —Ç–∞–∫ ‚Äî —Ç–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç =) –ù–∞–≤–µ—Ä–Ω–æ–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio
request_queue = deque()

# –≠—Ç–æ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
is_continue = 1




@bot.message_handler(commands=['start'])
def send_start(message):
	bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç Real-ESRGAN, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üèûÔ∏è")

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–≥ –±–æ—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_request(message):
	bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è')

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
@bot.message_handler(content_types=['photo'])
def handle_request(message):
	global is_continue
	global request_queue

	request_queue.append(message)

	file_type = 'photo'
	bot.reply_to(message, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...')
	try:
		# –ü–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å -- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º. 
		# –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ–º—É-—Ç–æ, –Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è -- –∂–¥–µ–º is_continue = 1, 
		# –∏ –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (–∞ –æ–Ω–∞ —É –Ω–∞—Å global)

		while (len(request_queue) > 0 and is_continue == 1):
			# –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
			message_pop = request_queue.popleft()
			is_continue = 0
			res = process_requests(message_pop, file_type, bot, model, logger)
			is_continue = 1
			
	except Exception as n:
		logger.error(n)
		bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')

		return 1

@bot.message_handler(content_types=['document'])
def handle_document(message):
	global is_continue
	global request_queue

	request_queue.append(message)

	file_type = 'document'
	bot.reply_to(message, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...')
	try:
		while (len(request_queue) > 0 and is_continue == 1):
			# –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
			message_pop = request_queue.popleft()
			is_continue = 0
			res = process_requests(message_pop, file_type, bot, model, logger)
			is_continue = 1

	except Exception as n:
		logger.error(n)
		bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
		# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏.
		return 1



bot.infinity_polling(timeout=10, long_polling_timeout = 5)